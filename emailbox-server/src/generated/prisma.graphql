# source: https://us1.prisma.sh/danramosf-4007cb/database/dev
# timestamp: Fri Oct 12 2018 18:33:14 GMT-0400 (Hor. de ver√£o do leste dos EUA )

type AggregateEmail {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Email implements Node {
  id: ID!
  content: String!
  subject: String!
  read: Boolean!
  sentBy: String!
  sentTo: User
}

"""A connection to a list of items."""
type EmailConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [EmailEdge]!
  aggregate: AggregateEmail!
}

input EmailCreateInput {
  content: String!
  subject: String!
  read: Boolean!
  sentBy: String!
  sentTo: UserCreateOneWithoutEmailsInput
}

input EmailCreateManyWithoutSentToInput {
  create: [EmailCreateWithoutSentToInput!]
  connect: [EmailWhereUniqueInput!]
}

input EmailCreateWithoutSentToInput {
  content: String!
  subject: String!
  read: Boolean!
  sentBy: String!
}

"""An edge in a connection."""
type EmailEdge {
  """The item at the end of the edge."""
  node: Email!

  """A cursor for use in pagination."""
  cursor: String!
}

enum EmailOrderByInput {
  id_ASC
  id_DESC
  content_ASC
  content_DESC
  subject_ASC
  subject_DESC
  read_ASC
  read_DESC
  sentBy_ASC
  sentBy_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type EmailPreviousValues {
  id: ID!
  content: String!
  subject: String!
  read: Boolean!
  sentBy: String!
}

type EmailSubscriptionPayload {
  mutation: MutationType!
  node: Email
  updatedFields: [String!]
  previousValues: EmailPreviousValues
}

input EmailSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [EmailSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [EmailSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EmailSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: EmailWhereInput
}

input EmailUpdateInput {
  content: String
  subject: String
  read: Boolean
  sentBy: String
  sentTo: UserUpdateOneWithoutEmailsInput
}

input EmailUpdateManyWithoutSentToInput {
  create: [EmailCreateWithoutSentToInput!]
  connect: [EmailWhereUniqueInput!]
  disconnect: [EmailWhereUniqueInput!]
  delete: [EmailWhereUniqueInput!]
  update: [EmailUpdateWithWhereUniqueWithoutSentToInput!]
  upsert: [EmailUpsertWithWhereUniqueWithoutSentToInput!]
}

input EmailUpdateWithoutSentToDataInput {
  content: String
  subject: String
  read: Boolean
  sentBy: String
}

input EmailUpdateWithWhereUniqueWithoutSentToInput {
  where: EmailWhereUniqueInput!
  data: EmailUpdateWithoutSentToDataInput!
}

input EmailUpsertWithWhereUniqueWithoutSentToInput {
  where: EmailWhereUniqueInput!
  update: EmailUpdateWithoutSentToDataInput!
  create: EmailCreateWithoutSentToInput!
}

input EmailWhereInput {
  """Logical AND on all given filters."""
  AND: [EmailWhereInput!]

  """Logical OR on all given filters."""
  OR: [EmailWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EmailWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  content: String

  """All values that are not equal to given value."""
  content_not: String

  """All values that are contained in given list."""
  content_in: [String!]

  """All values that are not contained in given list."""
  content_not_in: [String!]

  """All values less than the given value."""
  content_lt: String

  """All values less than or equal the given value."""
  content_lte: String

  """All values greater than the given value."""
  content_gt: String

  """All values greater than or equal the given value."""
  content_gte: String

  """All values containing the given string."""
  content_contains: String

  """All values not containing the given string."""
  content_not_contains: String

  """All values starting with the given string."""
  content_starts_with: String

  """All values not starting with the given string."""
  content_not_starts_with: String

  """All values ending with the given string."""
  content_ends_with: String

  """All values not ending with the given string."""
  content_not_ends_with: String
  subject: String

  """All values that are not equal to given value."""
  subject_not: String

  """All values that are contained in given list."""
  subject_in: [String!]

  """All values that are not contained in given list."""
  subject_not_in: [String!]

  """All values less than the given value."""
  subject_lt: String

  """All values less than or equal the given value."""
  subject_lte: String

  """All values greater than the given value."""
  subject_gt: String

  """All values greater than or equal the given value."""
  subject_gte: String

  """All values containing the given string."""
  subject_contains: String

  """All values not containing the given string."""
  subject_not_contains: String

  """All values starting with the given string."""
  subject_starts_with: String

  """All values not starting with the given string."""
  subject_not_starts_with: String

  """All values ending with the given string."""
  subject_ends_with: String

  """All values not ending with the given string."""
  subject_not_ends_with: String
  read: Boolean

  """All values that are not equal to given value."""
  read_not: Boolean
  sentBy: String

  """All values that are not equal to given value."""
  sentBy_not: String

  """All values that are contained in given list."""
  sentBy_in: [String!]

  """All values that are not contained in given list."""
  sentBy_not_in: [String!]

  """All values less than the given value."""
  sentBy_lt: String

  """All values less than or equal the given value."""
  sentBy_lte: String

  """All values greater than the given value."""
  sentBy_gt: String

  """All values greater than or equal the given value."""
  sentBy_gte: String

  """All values containing the given string."""
  sentBy_contains: String

  """All values not containing the given string."""
  sentBy_not_contains: String

  """All values starting with the given string."""
  sentBy_starts_with: String

  """All values not starting with the given string."""
  sentBy_not_starts_with: String

  """All values ending with the given string."""
  sentBy_ends_with: String

  """All values not ending with the given string."""
  sentBy_not_ends_with: String
  sentTo: UserWhereInput
}

input EmailWhereUniqueInput {
  id: ID
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createEmail(data: EmailCreateInput!): Email!
  createUser(data: UserCreateInput!): User!
  updateEmail(data: EmailUpdateInput!, where: EmailWhereUniqueInput!): Email
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  deleteEmail(where: EmailWhereUniqueInput!): Email
  deleteUser(where: UserWhereUniqueInput!): User
  upsertEmail(where: EmailWhereUniqueInput!, create: EmailCreateInput!, update: EmailUpdateInput!): Email!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  updateManyEmails(data: EmailUpdateInput!, where: EmailWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput): BatchPayload!
  deleteManyEmails(where: EmailWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  emails(where: EmailWhereInput, orderBy: EmailOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Email]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  email(where: EmailWhereUniqueInput!): Email
  user(where: UserWhereUniqueInput!): User
  emailsConnection(where: EmailWhereInput, orderBy: EmailOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EmailConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Subscription {
  email(where: EmailSubscriptionWhereInput): EmailSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User implements Node {
  id: ID!
  emailAddress: String!
  password: String!
  emails(where: EmailWhereInput, orderBy: EmailOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Email!]
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  emailAddress: String!
  password: String!
  emails: EmailCreateManyWithoutSentToInput
}

input UserCreateOneWithoutEmailsInput {
  create: UserCreateWithoutEmailsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutEmailsInput {
  emailAddress: String!
  password: String!
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  emailAddress_ASC
  emailAddress_DESC
  password_ASC
  password_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  emailAddress: String!
  password: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  emailAddress: String
  password: String
  emails: EmailUpdateManyWithoutSentToInput
}

input UserUpdateOneWithoutEmailsInput {
  create: UserCreateWithoutEmailsInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutEmailsDataInput
  upsert: UserUpsertWithoutEmailsInput
}

input UserUpdateWithoutEmailsDataInput {
  emailAddress: String
  password: String
}

input UserUpsertWithoutEmailsInput {
  update: UserUpdateWithoutEmailsDataInput!
  create: UserCreateWithoutEmailsInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  emailAddress: String

  """All values that are not equal to given value."""
  emailAddress_not: String

  """All values that are contained in given list."""
  emailAddress_in: [String!]

  """All values that are not contained in given list."""
  emailAddress_not_in: [String!]

  """All values less than the given value."""
  emailAddress_lt: String

  """All values less than or equal the given value."""
  emailAddress_lte: String

  """All values greater than the given value."""
  emailAddress_gt: String

  """All values greater than or equal the given value."""
  emailAddress_gte: String

  """All values containing the given string."""
  emailAddress_contains: String

  """All values not containing the given string."""
  emailAddress_not_contains: String

  """All values starting with the given string."""
  emailAddress_starts_with: String

  """All values not starting with the given string."""
  emailAddress_not_starts_with: String

  """All values ending with the given string."""
  emailAddress_ends_with: String

  """All values not ending with the given string."""
  emailAddress_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  emails_every: EmailWhereInput
  emails_some: EmailWhereInput
  emails_none: EmailWhereInput
}

input UserWhereUniqueInput {
  id: ID
  emailAddress: String
}
